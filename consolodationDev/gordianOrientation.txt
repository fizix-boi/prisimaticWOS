	//length scales for defined problem
	double hBottom = 0.87 * pow(10, (-6));
	double spacer = 2.1 * pow(10, (-6));
	double hTop = 0.2 * pow(10, (-6));
	double waller = spacer + hTop;

	//l=y, w=x

	double lGate = 2 * pow(10, (-6));
	double wGate = 0.5 * pow(10, (-6));

	double lOpen = (8.0 + 8.0 + 1.0) * wGate;
	double wOpen = wGate;

	/*
	dr, as explored in IV.6, might need to be set to
	dr = -1 * (waller - (lGate / 2))
	in order to 'reach' the bottom of the channel

	dr_v01 = 34 * pow(10, (-9));
	dr_v02 = -0.1 * waller;
	*/
	double dr =  -1 * (waller - (lGate / 2));

	double negXLength = 50 * pow(10, (-6));
	double negYLength = 200 * pow(10, (-6));

	double x0 = -0.975 * (lOpen * 0.5);

	//initialize electron
	double electronPos[] = {0.0, 0.0, dr};
	ElectronClass epectron;
	double q = 1.60217662 * pow(10, (-19)); //[C]
	electron(&epectron, -1.0 * q, electronPos);

	//initialize metal plates in system
	int numObs = 12;
	MetalSheetClass objects[numObs];
	HoleClass nullHoles[0];
	double poser[numObs][3];
	double geoer[numObs][3];

	//defining frame

	double vguard = 0;

	//negative x metal
	MetalSheetClass negX;
	int negXNumHoles = 0;
	HoleClass negXHoles[negXNumHoles];
	double negXPos[] = {-0.5 * (negXLength + lOpen), 0.0, -hTop * 0.5};
	double negXGeo[] = {negXLength, lGate, hTop};
	metalSheet(&negX, vguard, negXPos, negXGeo, negXNumHoles, negXHoles);
	objects[8] = negX;

	//positive x metal
	MetalSheetClass posX;
	int posXNumHoles = 0;
	HoleClass posXHoles[posXNumHoles];
	double posXPos[] = {0.5 * (negXLength + lOpen), 0.0, -hTop * 0.5};
	double posXGeo[] = {negXLength, lGate, hTop};
	metalSheet(&posX, vguard, posXPos, posXGeo, posXNumHoles, posXHoles);
	objects[9] = posX;

	//negative y metal
	MetalSheetClass negY;
	int negYNumHoles = 0;
	HoleClass negYHoles[negYNumHoles];
	double negYPos[] = {0.0, -0.5 * (negYLength + wOpen), -hTop * 0.5};
	double negYGeo[] = {2 * negXLength + lOpen, negYLength, hTop};
	metalSheet(&negY, vguard, negYPos, negYGeo, negYNumHoles, negYHoles);
	objects[10] = negY;

	//positive y metal
	MetalSheetClass posY;
	int posYNumHoles = 0;
	HoleClass posYHoles[posYNumHoles];
	double posYPos[] = {0.0, 0.5 * (negYLength + wOpen), -hTop * 0.5};
	double posYGeo[] = {2 * negXLength + lOpen, negYLength, hTop};
	metalSheet(&posY, vguard, posYPos, posYGeo, posYNumHoles, posYHoles);
	objects[11] = posY;

	//defining twiddles

	double numTwid = 8;
	double vTwidNull[] = {0, 0, 0, 0, 0, 0, 0, 0};
	double vTwid[] = {vguard, 0, 0, -vguard / 2, -vguard / 2, 0, 0, vguard};

	int j = 0;
	for(; j < numTwid; j++){
		MetalSheetClass twiddle;
		poser[j][0] = (-7.0 + (2.0 * j)) * wGate;
		poser[j][1] = 0.0;
		poser[j][2] = -hBottom * 0.5 - hTop - spacer;
		double gateGeo[] = {wGate, lGate, hBottom};
		metalSheet(&(objects[j]), vTwidNull[j], poser[j], gateGeo, 0, nullHoles);
		//print(objects[j]);
	}
